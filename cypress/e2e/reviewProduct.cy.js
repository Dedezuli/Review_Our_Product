import { faker } from '@faker-js/faker'
import reviewPage from '@Model/Review_Product_Page'

describe('Review Product', () => {
  beforeEach(() => {
    cy.visit('')
  })
  let namePerson = faker.person.fullName()
  let phoneNo = `628` + faker.finance.account(9)
  let date = new Date().toLocaleDateString()
  it('Review Product with input all answers, should succeed', { retries: 2 }, () => {
    cy.get(reviewPage.headerPage).should('be.visible').wait(2000)
    cy.get(reviewPage.fullName).clear().type(namePerson)
    cy.get(reviewPage.phoneNumber).clear().type(phoneNo)
    cy.get(reviewPage.affordable).click()
    cy.get(reviewPage.start4).click()
    cy.get(reviewPage.date).dblclick().type(date)
    cy.get(reviewPage.submitButton).click().wait(2000)
    cy.get(reviewPage.thankYouMessage)
      .should('be.visible')
      .and('contain', 'Your response has been successfully recorded.')
    cy.get(reviewPage.saveBotton).should('be.visible')
  })
  it('Review Product with input submitted name, should succeed', { retries: 2 }, () => {
    cy.get(reviewPage.headerPage).should('be.visible').wait(2000)
    cy.get(reviewPage.fullName).clear().type(namePerson)
    cy.get(reviewPage.phoneNumber).clear().type(phoneNo)
    cy.get(reviewPage.affordable).click()
    cy.get(reviewPage.start4).click()
    cy.get(reviewPage.date).dblclick().type(date)
    cy.get(reviewPage.submitButton).click().wait(2000)
    cy.get(reviewPage.thankYouMessage)
      .should('be.visible')
      .and('contain', 'Your response has been successfully recorded.')
    cy.get(reviewPage.saveBotton).should('be.visible')
  })
  it('Review Product with input submitted Phone Number, should succeed', { retries: 2 }, () => {
    cy.get(reviewPage.headerPage).should('be.visible').wait(2000)
    cy.get(reviewPage.fullName).clear().type(faker.person.fullName())
    cy.get(reviewPage.phoneNumber).clear().type(phoneNo)
    cy.get(reviewPage.affordable).click()
    cy.get(reviewPage.start4).click()
    cy.get(reviewPage.date).dblclick().type(date)
    cy.get(reviewPage.submitButton).click().wait(2000)
    cy.get(reviewPage.thankYouMessage)
      .should('be.visible')
      .and('contain', 'Your response has been successfully recorded.')
    cy.get(reviewPage.saveBotton).should('be.visible')
  })
  it('Review Product without input name, should fail', { retries: 2 }, () => {
    cy.get(reviewPage.headerPage).should('be.visible').wait(2000)
    cy.get(reviewPage.phoneNumber)
      .clear()
      .type(`628` + faker.finance.account(9))
    cy.get(reviewPage.affordable).click()
    cy.get(reviewPage.start4).click()
    cy.get(reviewPage.date).dblclick().type(date)
    cy.get(reviewPage.submitButton).click().wait(2000)
    cy.get(reviewPage.validationError).should('be.visible').and('contain', 'This question is required.')
    cy.contains('1 question(s) need to be completed before submitting: Question 1.').should('be.visible')
  })
  it('Review Product without input Phone Number, should fail', { retries: 2 }, () => {
    cy.get(reviewPage.headerPage).should('be.visible').wait(2000)
    cy.get(reviewPage.fullName).clear().type(faker.person.fullName())
    cy.get(reviewPage.affordable).click()
    cy.get(reviewPage.start4).click()
    cy.get(reviewPage.date).dblclick().type(date)
    cy.get(reviewPage.submitButton).click().wait(2000)
    cy.get(reviewPage.validationError).should('be.visible').and('contain', 'This question is required.')
    cy.contains('1 question(s) need to be completed before submitting: Question 2.').should('be.visible')
  })
  it('Review Product without input answer to question 3, should fail', { retries: 2 }, () => {
    cy.get(reviewPage.headerPage).should('be.visible').wait(2000)
    cy.get(reviewPage.fullName).clear().type(faker.person.fullName())
    cy.get(reviewPage.phoneNumber)
      .clear()
      .type(`628` + faker.finance.account(9))
    cy.get(reviewPage.start4).click()
    cy.get(reviewPage.date).dblclick().type(date)
    cy.get(reviewPage.submitButton).click().wait(2000)
    cy.get(reviewPage.validationError).should('be.visible').and('contain', 'This question is required.')
    cy.contains('1 question(s) need to be completed before submitting: Question 3.').should('be.visible')
  })
  it('Review Product without input Rate, should fail', { retries: 2 }, () => {
    cy.get(reviewPage.headerPage).should('be.visible').wait(2000)
    cy.get(reviewPage.fullName).clear().type(faker.person.fullName())
    cy.get(reviewPage.phoneNumber)
      .clear()
      .type(`628` + faker.finance.account(9))
    cy.get(reviewPage.expensive).click()
    cy.get(reviewPage.date).dblclick().type(date)
    cy.get(reviewPage.submitButton).click().wait(2000)
    cy.get(reviewPage.validationError).should('be.visible').and('contain', 'This question is required.')
    cy.contains('1 question(s) need to be completed before submitting: Question 4.').should('be.visible')
  })
  it('Review Product without input Review date, should fail', { retries: 2 }, () => {
    cy.get(reviewPage.headerPage).should('be.visible').wait(2000)
    cy.get(reviewPage.fullName).clear().type(faker.person.fullName())
    cy.get(reviewPage.phoneNumber)
      .clear()
      .type(`628` + faker.finance.account(9))
    cy.get(reviewPage.affordable).click()
    cy.get(reviewPage.start4).click()
    cy.get(reviewPage.submitButton).click().wait(2000)
    cy.get(reviewPage.validationError).should('be.visible').and('contain', 'This question is required.')
    cy.contains('1 question(s) need to be completed before submitting: Question 5.').should('be.visible')
  })
  it('Review Product without input all answers, should fail', { retries: 2 }, () => {
    cy.get(reviewPage.headerPage).should('be.visible').wait(2000)
    cy.get(reviewPage.submitButton).click().wait(2000)
    cy.get(reviewPage.validationError).should('be.visible').and('contain', 'This question is required.')
    cy.contains(
      '5 question(s) need to be completed before submitting: Question 1,Question 2,Question 3,Question 4,Question 5.'
    ).should('be.visible')
  })
})
